
# Shell lab feedback

Jump forward to Part 2 for score summary.

Trace file runs that produce different output from the
reference shell are reported in Part 1; may be followed by
feedback and possible deduction(s) info.


## Part 0: Compiling your shell

gcc -Wall -O2    tsh.c   -o tsh
gcc -Wall -O2    myspin.c   -o myspin
gcc -Wall -O2    mysplit.c   -o mysplit
gcc -Wall -O2    mystop.c   -o mystop
gcc -Wall -O2    myint.c   -o myint

## Part 1: Trace file evaluation

Note: output only shown if different from reference shell.

Checking trace01.txt...
Checking trace02.txt...
Checking trace03.txt...
Checking trace04.txt...
Checking trace05.txt...
Checking trace06.txt...
Checking trace07.txt...
Checking trace08.txt...
Checking trace09.txt...

Reference output:
#
# trace09.txt - Process bg builtin command
#
tsh> ./myspin 4 &
[1] (5298) ./myspin 4 &
tsh> ./myspin 5
Job [2] (5300) stopped by signal 20
tsh> jobs
[1] (5298) Running ./myspin 4 &
[2] (5300) Stopped ./myspin 5 
tsh> bg %2
[2] (5300) ./myspin 5 
tsh> jobs
[1] (5298) Running ./myspin 4 &
[2] (5300) Running ./myspin 5 
Student's output:
#
# trace09.txt - Process bg builtin command
#
tsh> ./myspin 4 &
[1] (5315) ./myspin 4 &
tsh> ./myspin 5
Job [2] (5317) stopped by signal 20
tsh> jobs
[1] (5315) Running ./myspin 4 &
[2] (5317) Stopped ./myspin 5 
tsh> bg %2
2 5317 ./myspin 5 
tsh> jobs
[1] (5315) Running ./myspin 4 &
[2] (5317) Running ./myspin 5 
Checking trace10.txt...
Checking trace11.txt...
Reference output:
#
# trace11.txt - Forward SIGINT to every process in foreground process group
#
tsh> ./mysplit 4
Job [1] (5401) terminated by signal 2
tsh> /bin/ps x
  PID TTY      STAT   TIME COMMAND
 2378 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace16.txt -s ./tsh -a -p
 2379 pts/48   S+     0:00 ./tsh -p
 2381 pts/48   T      0:00 ./mystop 2
 3219 pts/74   Ss     0:00 zsh
 4734 ?        S      0:04 sshd: lee@pts/178
 4735 pts/178  Ss+    0:00 -zsh
 5020 pts/48   S+     0:00 sh -c /home/lee/classes/cs351/grading/shlab/grade-shlab.pl  -f ./handin/tnguye48.c -s ../labs_master/shlab/src > /home/lee/classes/cs351/grading/shlab/./handin.grades/tnguye48.c.out 2>&1
 5021 pts/48   S+     0:00 grade-shlab.pl
 5369 pts/74   S+     0:00 sleep 20
 5391 pts/48   S+     0:00 sh -c cd /tmp/tnguye48.c.5021; ./checktsh.pl -e -t trace11.txt
 5392 pts/48   S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace11.txt
 5397 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace11.txt -s ./tshref -a -p
 5399 pts/48   S+     0:00 ./tshref -p
 5411 pts/48   R      0:00 /bin/ps x
13500 ?        S      0:00 sshd: lee@pts/166
13501 pts/166  Ss     0:00 -zsh
13549 pts/166  S+     0:00 tmux20 at
16427 pts/201  Ss+    0:00 zsh
16509 pts/74   S+     0:00 /bin/bash /home/lee/scripts/killit.sh
16516 pts/171  Ss     0:05 zsh
16622 pts/48   S+     0:00 grade-handins.pl
17048 ?        Ss     7:32 emacs --daemon
17082 pts/48   Ss     0:00 zsh
17667 pts/171  S+     0:00 emacsclient -t -a 
20402 ?        Ss     8:32 tmux20
28500 pts/218  Ss+    0:00 zsh
29576 pts/117  Ss+    0:01 zsh
31758 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace08.txt -s ./tsh -a -p
31759 pts/48   Z+     0:00 [tsh] <defunct>
31763 pts/48   T+     0:00 ./myspin 5
32036 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace09.txt -s ./tsh -a -p
32037 pts/48   Z+     0:00 [tsh] <defunct>
32041 pts/48   T+     0:00 ./myspin 5
32184 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace12.txt -s ./tsh -a -p
32185 pts/48   Z+     0:00 [tsh] <defunct>
32187 pts/48   T+     0:00 ./mysplit 4
32188 pts/48   Z+     0:00 [mysplit] <defunct>
32355 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace15.txt -s ./tsh -a -p
32356 pts/48   S+     0:00 ./tsh -p
32369 pts/48   T+     0:00 ./myspin 3
Student's output:
#
# trace11.txt - Forward SIGINT to every process in foreground process group
#
tsh> ./mysplit 4
Job [1] (5415) terminated by signal 2
tsh> /bin/ps x
  PID TTY      STAT   TIME COMMAND
 2378 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace16.txt -s ./tsh -a -p
 2379 pts/48   S+     0:00 ./tsh -p
 2381 pts/48   T      0:00 ./mystop 2
 3219 pts/74   Ss     0:00 zsh
 4734 ?        S      0:04 sshd: lee@pts/178
 4735 pts/178  Ss+    0:00 -zsh
 5020 pts/48   S+     0:00 sh -c /home/lee/classes/cs351/grading/shlab/grade-shlab.pl  -f ./handin/tnguye48.c -s ../labs_master/shlab/src > /home/lee/classes/cs351/grading/shlab/./handin.grades/tnguye48.c.out 2>&1
 5021 pts/48   S+     0:00 grade-shlab.pl
 5369 pts/74   S+     0:00 sleep 20
 5391 pts/48   S+     0:00 sh -c cd /tmp/tnguye48.c.5021; ./checktsh.pl -e -t trace11.txt
 5392 pts/48   S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace11.txt
 5412 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace11.txt -s ./tsh -a -p
 5413 pts/48   S+     0:00 ./tsh -p
 5421 pts/48   R      0:00 /bin/ps x
13500 ?        S      0:00 sshd: lee@pts/166
13501 pts/166  Ss     0:00 -zsh
13549 pts/166  S+     0:00 tmux20 at
16427 pts/201  Ss+    0:00 zsh
16509 pts/74   S+     0:00 /bin/bash /home/lee/scripts/killit.sh
16516 pts/171  Ss     0:05 zsh
16622 pts/48   S+     0:00 grade-handins.pl
17048 ?        Ss     7:32 emacs --daemon
17082 pts/48   Ss     0:00 zsh
17667 pts/171  S+     0:00 emacsclient -t -a 
20402 ?        Ss     8:32 tmux20
28500 pts/218  Ss+    0:00 zsh
29576 pts/117  Ss+    0:01 zsh
31758 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace08.txt -s ./tsh -a -p
31759 pts/48   Z+     0:00 [tsh] <defunct>
31763 pts/48   T+     0:00 ./myspin 5
32036 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace
09.txt -s ./tsh -a -p
32037 pts/48   Z+     0:00 [tsh] <defunct>
32041 pts/48   T+     0:00 ./myspin 5
32184 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace12.txt -s ./tsh -a -p
32185 pts/48   Z+     0:00 [tsh] <defunct>
32187 pts/48   T+     0:00 ./mysplit 4
32188 pts/48   Z+     0:00 [mysplit] <defunct>
32355 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace15.txt -s ./tsh -a -p
32356 pts/48   S+     0:00 ./tsh -p
32369 pts/48   T+     0:00 ./myspin 3
Checking trace12.txt...
./checktsh.pl: ERROR: Expected 2 mysplit processes. Got 4 instead:
Reference output:
#
# trace12.txt - Forward SIGTSTP to every process in foreground process group
#
tsh> ./mysplit 4
Job [1] (5430) stopped by signal 20
tsh> jobs
[1] (5430) Stopped ./mysplit 4 
tsh> /bin/ps x
  PID TTY      STAT   TIME COMMAND
 2378 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace16.txt -s ./tsh -a -p
 2379 pts/48   S+     0:00 ./tsh -p
 2381 pts/48   T      0:00 ./mystop 2
 3219 pts/74   Ss     0:00 zsh
 4734 ?        S      0:04 sshd: lee@pts/178
 4735 pts/178  Ss+    0:00 -zsh
 5020 pts/48   S+     0:00 sh -c /home/lee/classes/cs351/grading/shlab/grade-shlab.pl  -f ./handin/tnguye48.c -s ../labs_master/shlab/src > /home/lee/classes/cs351/grading/shlab/./handin.grades/tnguye48.c.out 2>&1
 5021 pts/48   S+     0:00 grade-shlab.pl
 5369 pts/74   S+     0:00 sleep 20
 5422 pts/48   S+     0:00 sh -c cd /tmp/tnguye48.c.5021; ./checktsh.pl -e -t trace12.txt
 5423 pts/48   S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace12.txt
 5427 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace12.txt -s ./tshref -a -p
 5428 pts/48   S+     0:00 ./tshref -p
 5430 pts/48   T      0:00 ./mysplit 4
 5431 pts/48   T      0:00 ./mysplit 4
 5434 pts/48   R      0:00 /bin/ps x
13500 ?        S      0:00 sshd: lee@pts/166
13501 pts/166  Ss     0:00 -zsh
13549 pts/166  S+     0:00 tmux20 at
16427 pts/201  Ss+    0:00 zsh
16509 pts/74   S+     0:00 /bin/bash /home/lee/scripts/killit.sh
16516 pts/171  Ss     0:05 zsh
16622 pts/48   S+     0:00 grade-handins.pl
17048 ?        Ss     7:32 emacs --daemon
17082 pts/48   Ss     0:00 zsh
17667 pts/171  S+     0:00 emacsclient -t -a 
20402 ?        Ss     8:32 tmux20
28500 pts/218  Ss+    0:00 zsh
29576 pts/117  Ss+    0:01 zsh
31758 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace08.txt -s ./tsh -a -p
31759 pts/48   Z+     0:00 [tsh] <defunct>
31763 pts/48   T+     0:00 ./myspin 5
32036 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace09.txt -s ./tsh -a -p
32037 pts/48   Z+     0:00 [tsh] <defunct>
32041 pts/48   T+     0:00 ./myspin 5
32184 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace12.txt -s ./tsh -a -p
32185 pts/48   Z+     0:00 [tsh] <defunct>
32187 pts/48   T+     0:00 ./mysplit 4
32188 pts/48   Z+     0:00 [mysplit] <defunct>
32355 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace15.txt -s ./tsh -a -p
32356 pts/48   S+     0:00 ./tsh -p
32369 pts/48   T+     0:00 ./myspin 3
Student's output:
#
# trace12.txt - Forward SIGTSTP to every process in foreground process group
#
tsh> ./mysplit 4
Job [1] (5438) stopped by signal 20
tsh> jobs
[1] (5438) Stopped ./mysplit 4 
tsh> /bin/ps x
  PID TTY      STAT   TIME COMMAND
 2378 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace16.txt -s ./tsh -a -p
 2379 pts/48   S+     0:00 ./tsh -p
 2381 pts/48   T      0:00 ./mystop 2
 3219 pts/74   Ss     0:00 zsh
 4734 ?        S      0:04 sshd: lee@pts/178
 4735 pts/178  Ss+    0:00 -zsh
 5020 pts/48   S+     0:00 sh -c /home/lee/classes/cs351/grading/shlab/grade-shlab.pl  -f ./handin/tnguye48.c -s ../labs_master/shlab/src > /home/lee/classes/cs351/grading/shlab/./handin.grades/tnguye48.c.out 2>&1
 5021 pts/48   S+     0:00 grade-shlab.pl
 5369 pts/74   S+     0:00 sleep 20
 5422 pts/48   S+     0:00 sh -c cd /tmp/tnguye48.c.5021; ./checktsh.pl -e -t trace12.txt
 5423 pts/48   S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace12.txt
 5435 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace12.txt -s ./tsh -a -p
 5436 pts/48   S+     0:00 ./tsh -p
 5438 pts/48   T      0:00 ./mysplit 4
 5439 pts/48   T      0:00 ./mysplit 4
 5451 pts/48   R      0:00 /bin/ps x
13500 ?        S      0:00 sshd: lee@pts/166
13501 pts/166  Ss     0:00 -zsh
13549 pts/166  S+     0:00 tmux20 at
16427 pts/201  Ss+    0:00 zsh
16509 pts/74   S+     0:00 /bin/bash /home/lee/scripts/killit.sh
16516 pts/171  Ss     0:05 zsh
16622 pts/48   S+     0:00 grade-handins.pl
17048 ?        Ss     7:32 emacs --daemon
17082 pts/48   Ss     0:00 zsh
17667 pts/171  S+     0:00 emacsclient -t -a 
20402 ?        Ss 
    8:32 tmux20
28500 pts/218  Ss+    0:00 zsh
29576 pts/117  Ss+    0:01 zsh
31758 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace08.txt -s ./tsh -a -p
31759 pts/48   Z+     0:00 [tsh] <defunct>
31763 pts/48   T+     0:00 ./myspin 5
32036 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace09.txt -s ./tsh -a -p
32037 pts/48   Z+     0:00 [tsh] <defunct>
32041 pts/48   T+     0:00 ./myspin 5
32184 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace12.txt -s ./tsh -a -p
32185 pts/48   Z+     0:00 [tsh] <defunct>
32187 pts/48   T+     0:00 ./mysplit 4
32188 pts/48   Z+     0:00 [mysplit] <defunct>
32355 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace15.txt -s ./tsh -a -p
32356 pts/48   S+     0:00 ./tsh -p
32369 pts/48   T+     0:00 ./myspin 3
Checking trace13.txt...
./checktsh.pl: ERROR: Expected 2 mysplit processes in the first ps. Got 4 instead:
Reference output:
#
# trace13.txt - Restart every stopped process in process group
#
tsh> ./mysplit 4
Job [1] (5460) stopped by signal 20
tsh> jobs
[1] (5460) Stopped ./mysplit 4 
tsh> /bin/ps x
  PID TTY      STAT   TIME COMMAND
 2378 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace16.txt -s ./tsh -a -p
 2379 pts/48   S+     0:00 ./tsh -p
 2381 pts/48   T      0:00 ./mystop 2
 3219 pts/74   Ss     0:00 zsh
 4734 ?        S      0:04 sshd: lee@pts/178
 4735 pts/178  Ss+    0:00 -zsh
 5020 pts/48   S+     0:00 sh -c /home/lee/classes/cs351/grading/shlab/grade-shlab.pl  -f ./handin/tnguye48.c -s ../labs_master/shlab/src > /home/lee/classes/cs351/grading/shlab/./handin.grades/tnguye48.c.out 2>&1
 5021 pts/48   S+     0:00 grade-shlab.pl
 5369 pts/74   S+     0:00 sleep 20
 5452 pts/48   S+     0:00 sh -c cd /tmp/tnguye48.c.5021; ./checktsh.pl -e -t trace13.txt
 5453 pts/48   S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace13.txt
 5457 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace13.txt -s ./tshref -a -p
 5458 pts/48   S+     0:00 ./tshref -p
 5460 pts/48   T      0:00 ./mysplit 4
 5461 pts/48   T      0:00 ./mysplit 4
 5465 pts/48   R      0:00 /bin/ps x
13500 ?        S      0:00 sshd: lee@pts/166
13501 pts/166  Ss     0:00 -zsh
13549 pts/166  S+     0:00 tmux20 at
16427 pts/201  Ss+    0:00 zsh
16509 pts/74   S+     0:00 /bin/bash /home/lee/scripts/killit.sh
16516 pts/171  Ss     0:05 zsh
16622 pts/48   S+     0:00 grade-handins.pl
17048 ?        Ss     7:32 emacs --daemon
17082 pts/48   Ss     0:00 zsh
17667 pts/171  S+     0:00 emacsclient -t -a 
20402 ?        Ss     8:32 tmux20
28500 pts/218  Ss+    0:00 zsh
29576 pts/117  Ss+    0:01 zsh
31758 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace08.txt -s ./tsh -a -p
31759 pts/48   Z+     0:00 [tsh] <defunct>
31763 pts/48   T+     0:00 ./myspin 5
32036 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace09.txt -s ./tsh -a -p
32037 pts/48   Z+     0:00 [tsh] <defunct>
32041 pts/48   T+     0:00 ./myspin 5
32184 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace12.txt -s ./tsh -a -p
32185 pts/48   Z+     0:00 [tsh] <defunct>
32187 pts/48   T+     0:00 ./mysplit 4
32188 pts/48   Z+     0:00 [mysplit] <defunct>
32355 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace15.txt -s ./tsh -a -p
32356 pts/48   S+     0:00 ./tsh -p
32369 pts/48   T+     0:00 ./myspin 3
tsh> fg %1
tsh> /bin/ps x
  PID TTY      STAT   TIME COMMAND
 2378 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace16.txt -s ./tsh -a -p
 2379 pts/48   S+     0:00 ./tsh -p
 2381 pts/48   T      0:00 ./mystop 2
 3219 pts/74   Ss     0:00 zsh
 4734 ?        S      0:04 sshd: lee@pts/178
 4735 pts/178  Ss+    0:00 -zsh
 5020 pts/48   S+     0:00 sh -c /home/lee/classes/cs351/grading/shlab/grade-shlab.pl  -f ./handin/tnguye48.c -s ../labs_master/shlab/src > /home/lee/classes/cs351/grading/shlab/./handin.grades/tnguye48.c.out 2>&1
 5021 pts/48   S+     0:00 grade-shlab.pl
 5369 pts/74   S+     0:00 sleep 20
 5452 pts/48   S+     0:00 sh -c cd /tmp/tnguye48.c.5021; ./checktsh.pl -e -t trace13.txt
 5453 pts/48   S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace13.txt
 5457 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace13.txt -s ./tshref -a -p
 5458 pts/48   S+     0:00 ./tshref -p
 5475 pts/48   R      0:00 /bin/ps x
13500 ?        S      0:00 sshd: lee@pts/166
13501 pts/166  Ss     0:00 -zsh
13549 pts/166  S+     0:00 tmux20 at
16427 pts/201  Ss+    0:00 zsh
16509 pts/74   S+     0:00 /bin/bash /home/lee/scripts/killit.sh
16516 pts/171  Ss     0:05 zsh
16622 pts/48   S+     0:00 grade-handins.pl
17048 ?        Ss     7:32 emacs --daemon
17082 pts/48   Ss     0:00 zsh
17667 pts/171  S+     0:00 emacsclient -t -a 
20402 ?        Ss     8:32 tmux20
28500 pts/218  Ss+    0:00 zsh
29576 pts/117  Ss+    0:01 zsh
31758 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace08.txt -s ./tsh -a -p
31759 pts/48   Z+     0:00 [tsh] <defunct>
31763 pts/48   T+     0:00 ./myspin 5
32036 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace09.txt -s ./tsh -a -p
32037 pts/48   Z+     0:00 [tsh] <defunct>
32041 pts/48   T+     0:00 ./myspin 5
32184 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace12.txt -s ./tsh -a -p
32185 pts/48   Z+     0:00 [tsh] <defunct>
32187 pts/48   T+     0:00 ./mysplit 4
32188 pts/48   Z+     0:00 [mysplit] <defunct>
32355 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace15.txt -s ./tsh -a -p
32356 pts/48   S+     0:00 ./tsh -p
32369 pts/48   T+     0:00 ./myspin 3
Student's output:
#
# trace13.txt - Restart every stopped process in process group
#
tsh> ./mysplit 4
Job [1] (5479) stopped by signal 20
tsh> jobs
[1] (5479) Stopped ./mysplit 4 
tsh> /bin/ps x
  PID TTY      STAT   TIME COMMAND
 2378 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace16.txt -s ./tsh -a -p
 2379 pts/48   S+     0:00 ./tsh -p
 2381 pts/48   T      0:00 ./mystop 2
 3219 pts/74   Ss     0:00 zsh
 4734 ?        S      0:04 sshd: lee@pts/178
 4735 pts/178  Ss+    0:00 -zsh
 5020 pts/48   S+     0:00 sh -c /home/lee/classes/cs351/grading/shlab/grade-shlab.pl  -f ./handin/tnguye48.c -s ../labs_master/shlab/src > /home/lee/classes/cs351/grading/shlab/./handin.grades/tnguye48.c.out 2>&1
 5021 pts/48   S+     0:00 grade-shlab.pl
 5452 pts/48   S+     0:00 sh -c cd /tmp/tnguye48.c.5021; ./checktsh.pl -e -t trace13.txt
 5453 pts/48   S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace13.txt
 5476 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace13.txt -s ./tsh -a -p
 5477 pts/48   S+     0:00 ./tsh -p
 5479 pts/48   T      0:00 ./mysplit 4
 5480 pts/48   T      0:00 ./mysplit 4
 5491 pts/74   S+     0:00 sleep 20
 5494 pts/48   R      0:00 /bin/ps x
13500 ?        S      0:00 sshd: lee@pts/166
13501 pts/166  Ss     0:00 -zsh
13549 pts/166  S+     0:00 tmux20 at
16427 pts/201  Ss+    0:00 zsh
16509 pts/74   S+     0:00 /bin/bash /home/lee/scripts/killit.sh
16516 pts/171  Ss     0:05 zsh
16622 pts/48   S+     0:00 grade-handins.pl
17048 ?        Ss     7:32 emacs --daemon
17082 pts/48   Ss     0:00 zsh
17667 pts/171  S+     0:00 emacsclient -t -a 
20402 ?        Ss     8:32 tmux20
28500 pts/218  Ss+    0:00 zsh
29576 pts/117  Ss+    0:01 zsh
31758 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace08.txt -s ./tsh -a -p
31759 pts/48   Z+     0:00 [tsh] <defunct>
31763 pts/48   T+     0:00 ./myspin 5
32036 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace09.txt -s ./tsh -a -p
32037 pts/48   Z+     0:00 [tsh] <defunct>
32041 pts/48   T+     0:00 ./myspin 5
32184 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace12.txt -s ./tsh -a -p
32185 pts/48   Z+     0:00 [tsh] <defunct>
32187 pts/48   T+     0:00 ./mysplit 4
32188 pts/48   Z+     0:00 [mysplit] <defunct>
32355 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace15.txt -s ./tsh -a -p
32356 pts/48   S+     0:00 ./tsh -p
32369 pts/48   T+     0:00 ./myspin 3
tsh> fg %1
tsh> /bin/ps x
  PID TTY      STAT   TIME COMMAND
 2378 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace16.txt -s ./tsh -a -p
 2379 pts/48   S+     0:00 ./tsh -p
 2381 pts/48   T      0:00 ./mystop 2
 3219 pts/74   Ss     0:00 zsh
 4734 ?        S      0:04 sshd: lee@pts/178
 4735 pts/178  Ss+    0:00 -zsh
 5020 pts/48   S+     0:00 sh -c /home/lee/classes/cs351/grading/shlab/grade-shlab.pl  -f ./handin/tnguye48.c -s ../labs_master/shlab/src > /home/lee/classes/cs351/grading/shlab/./handin.grades/tnguye48.c.out 2>&1
 5021 pts/48   S+     0:00 grade-shlab.pl
 5452 pts/48   S+     0:00 sh -c cd /tmp/tnguye48.c.5021; ./checktsh.pl -e -t trace13.txt
 5453 pts/48   S+     0:00 /usr/bin/perl ./checktsh.pl -e -t trace13.txt
 5476 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace13.txt -s ./tsh -a -p
 5477 pts/48   S+     0:00 ./tsh -p
 5491 pts/74   S+     0:00 sleep 20
 5497 pts/48   R      0:00 /bin/ps x
13500 ?        S      0:00 sshd: lee@pts/166
13501 pts/166  Ss     0:00 -zsh
13549 pts/166  S+     0:00 tmux20 at
16427 pts/201  Ss+    0:00 zsh
16509 pts/74   S+     0:00 /bin/bash /home/lee/scripts/killit.sh
16516 pts/171  Ss     0:05 zsh
166
22 pts/48   S+     0:00 grade-handins.pl
17048 ?        Ss     7:32 emacs --daemon
17082 pts/48   Ss     0:00 zsh
17667 pts/171  S+     0:00 emacsclient -t -a 
20402 ?        Ss     8:32 tmux20
28500 pts/218  Ss+    0:00 zsh
29576 pts/117  Ss+    0:01 zsh
31758 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace08.txt -s ./tsh -a -p
31759 pts/48   Z+     0:00 [tsh] <defunct>
31763 pts/48   T+     0:00 ./myspin 5
32036 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace09.txt -s ./tsh -a -p
32037 pts/48   Z+     0:00 [tsh] <defunct>
32041 pts/48   T+     0:00 ./myspin 5
32184 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace12.txt -s ./tsh -a -p
32185 pts/48   Z+     0:00 [tsh] <defunct>
32187 pts/48   T+     0:00 ./mysplit 4
32188 pts/48   Z+     0:00 [mysplit] <defunct>
32355 pts/48   S+     0:00 /usr/bin/perl ./sdriver.pl -t trace15.txt -s ./tsh -a -p
32356 pts/48   S+     0:00 ./tsh -p
32369 pts/48   T+     0:00 ./myspin 3
Checking trace14.txt...

Reference output:
#
# trace14.txt - Simple error handling
#
tsh> ./bogus
./bogus: Command not found
tsh> ./myspin 4 &
[1] (5508) ./myspin 4 &
tsh> fg
fg command requires PID or %jobid argument
tsh> bg
bg command requires PID or %jobid argument
tsh> fg a
fg: argument must be a PID or %jobid
tsh> bg a
bg: argument must be a PID or %jobid
tsh> fg 9999999
(9999999): No such process
tsh> bg 9999999
(9999999): No such process
tsh> fg %2
%2: No such job
tsh> fg %1
Job [1] (5508) stopped by signal 20
tsh> bg %2
%2: No such job
tsh> bg %1
[1] (5508) ./myspin 4 &
tsh> jobs
[1] (5508) Running ./myspin 4 &
Student's output:
#
# trace14.txt - Simple error handling
#
tsh> ./bogus
./bogus: Command not found
tsh> ./myspin 4 &
[1] (5532) ./myspin 4 &
tsh> fg
fg command requires PID or %jobid argument
tsh> bg
bg command requires PID or %jobid argument
tsh> fg a
fg: argument must be a pid or %jibid
tsh> bg a
bg: argument must be a pid or %jibid
tsh> fg 9999999
9999999: no such process
tsh> bg 9999999
9999999: no such process
tsh> fg %2
%2: no such job
tsh> fg %1
Job [1] (5532) stopped by signal 20
tsh> bg %2
%2: no such job
tsh> bg %1
1 5532 ./myspin 4 &
tsh> jobs
[1] (5532) Running ./myspin 4 &
Checking trace15.txt...

Reference output:
#
# trace15.txt - Putting it all together
#
tsh> ./bogus
./bogus: Command not found
tsh> ./myspin 10
Job [1] (5563) terminated by signal 2
tsh> ./myspin 3 &
[1] (5565) ./myspin 3 &
tsh> ./myspin 4 &
[2] (5567) ./myspin 4 &
tsh> jobs
[1] (5565) Running ./myspin 3 &
[2] (5567) Running ./myspin 4 &
tsh> fg %1
Job [1] (5565) stopped by signal 20
tsh> jobs
[1] (5565) Stopped ./myspin 3 &
[2] (5567) Running ./myspin 4 &
tsh> bg %3
%3: No such job
tsh> bg %1
[1] (5565) ./myspin 3 &
tsh> jobs
[1] (5565) Running ./myspin 3 &
[2] (5567) Running ./myspin 4 &
tsh> fg %1
tsh> quit
Student's output:
#
# trace15.txt - Putting it all together
#
tsh> ./bogus
./bogus: Command not found
tsh> ./myspin 10
Job [1] (5593) terminated by signal 2
tsh> ./myspin 3 &
[1] (5611) ./myspin 3 &
tsh> ./myspin 4 &
[2] (5613) ./myspin 4 &
tsh> jobs
[1] (5611) Running ./myspin 3 &
[2] (5613) Running ./myspin 4 &
tsh> fg %1
Job [1] (5611) stopped by signal 20
tsh> jobs
[1] (5611) Stopped ./myspin 3 &
[2] (5613) Running ./myspin 4 &
tsh> bg %3
%3: no such job
tsh> bg %1
1 5611 ./myspin 3 &
tsh> jobs
[1] (5611) Running ./myspin 3 &
[2] (5613) Running ./myspin 4 &
tsh> fg %1
tsh> quit
Checking trace16.txt...

## Part 2: Score

Total: 80 / 80


## Part 3: Original tnguye48.c file

/* 
 * tsh - A tiny shell program with job control
 */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>

/* Misc manifest constants */
#define MAXLINE    1024   /* max line size */
#define MAXARGS     128   /* max args on a command line */
#define MAXJOBS      16   /* max jobs at any point in time */
#define MAXJID    1<<16   /* max job ID */

/* Job states */
#define UNDEF 0 /* undefined */
#define FG 1    /* running in foreground */
#define BG 2    /* running in background */
#define ST 3    /* stopped */

/* 
 * Jobs states: FG (foreground), BG (background), ST (stopped)
 * Job state transitions and enabling actions:
 *     FG -> ST  : ctrl-z
 *     ST -> FG  : fg command
 *     ST -> BG  : bg command
 *     BG -> FG  : fg command
 * At most 1 job can be in the FG state.
 */

/* Global variables */
extern char **environ;      /* defined in libc */
char prompt[] = "tsh> ";    /* command line prompt (DO NOT CHANGE) */
int verbose = 0;            /* if true, print additional output */
int nextjid = 1;            /* next job ID to allocate */
char sbuf[MAXLINE];         /* for composing sprintf messages */

struct job_t {              /* The job struct */
  pid_t pid;              /* job PID */
  int jid;                /* job ID [1, 2, ...] */
  int state;              /* UNDEF, BG, FG, or ST */
  char cmdline[MAXLINE];  /* command line */
};
struct job_t jobs[MAXJOBS]; /* The job list */
/* End global variables */


/* Function prototypes */

/* Here are the functions that you will implement */
void eval(char *cmdline);
int builtin_cmd(char **argv);
void do_bgfg(char **argv);
void waitfg(pid_t pid);

void sigchld_handler(int sig);
void sigtstp_handler(int sig);
void sigint_handler(int sig);

/* Here are helper routines that we've provided for you */
int parseline(const char *cmdline, char **argv); 
void sigquit_handler(int sig);

void clearjob(struct job_t *job);
void initjobs(struct job_t *jobs);
int maxjid(struct job_t *jobs); 
int addjob(struct job_t *jobs, pid_t pid, int state, char *cmdline);
int deletejob(struct job_t *jobs, pid_t pid); 
pid_t fgpid(struct job_t *jobs);
struct job_t *getjobpid(struct job_t *jobs, pid_t pid);
struct job_t *getjobjid(struct job_t *jobs, int jid); 
int pid2jid(pid_t pid); 
void listjobs(struct job_t *jobs);

void usage(void);
void unix_error(char *msg);
void app_error(char *msg);
typedef void handler_t(int);
handler_t *Signal(int signum, handler_t *handler);

/*
 * main - The shell's main routine 
 */
int main(int argc, char **argv) 
{
  char c;
  char cmdline[MAXLINE];
  int emit_prompt = 1; /* emit prompt (default) */

  /* Redirect stderr to stdout (so that driver will get all output
   * on the pipe connected to stdout) */
  dup2(1, 2);

  /* Parse the command line */
  while ((c = getopt(argc, argv, "hvp")) != EOF) {
    switch (c) {
    case 'h':             /* print help message */
      usage();
      break;
    case 'v':             /* emit additional diagnostic info */
      verbose = 1;
      break;
    case 'p':             /* don't print a prompt */
      emit_prompt = 0;  /* handy for automatic testing */
      break;
    default:
      usage();
    }
  }

  /* Install the signal handlers */

  /* These are the ones you will need to implement */
  Signal(SIGINT,  sigint_handler);   /* ctrl-c */
  Signal(SIGTSTP, sigtstp_handler);  /* ctrl-z */
  Signal(SIGCHLD, sigchld_handler);  /* Terminated or stopped child */

  /* This one provides a clean way to kill the shell */
  Signal(SIGQUIT, sigquit_handler); 

  /* Initialize the job list */
  initjobs(jobs);

  /* Execute the shell's read/eval loop */
  while (1) {

    /* Read command line */
    if (emit_prompt) {
      printf("%s", prompt);
      fflush(stdout);
    }
    if ((fgets(cmdline, MAXLINE, stdin) == NULL) && ferror(stdin))
      app_error("fgets error");
    if (feof(stdin)) { /* End of file (ctrl-d) */
      fflush(stdout);
      exit(0);
    }

    /* Evaluate the command line */
    eval(cmdline);
    fflush(stdout);
    fflush(stdout);
  } 

  exit(0); /* control never reaches here */
}
  
/* 
 * eval - Evaluate the command line that the user has just typed in
 * 
 * If the user has requested a built-in command (quit, jobs, bg or fg)
 * then execute it immediately. Otherwise, fork a child process and
 * run the job in the context of the child. If the job is running in
 * the foreground, wait for it to terminate and then return.  Note:
 * each child process must have a unique process group ID so that our
 * background children don't receive SIGINT (SIGTSTP) from the kernel
 * when we type ctrl-c (ctrl-z) at the keyboard.  
 */

void eval(char *cmdline) 
{
  /* the following code demonstrates how to use parseline --- you'll 
   * want to replace most of it (at least the print statements). */
  int bg;
  char *argv[MAXARGS];
  pid_t pid;
  sigset_t set;

  bg = parseline(cmdline, argv);

  //checks for empty line
  if (argv[0] == NULL) {
    return;
  }
  if (!builtin_cmd(argv)) {
    sigprocmask(SIG_BLOCK, &set, NULL);
    //forking and execing a child process
    if ((pid = fork()) == 0) {
      sigprocmask(SIG_UNBLOCK, &set, NULL);
      setpgid(0,0);
      if (execv(argv[0], argv) < 0) {
	printf("%s: Command not found\n", argv[0]);
	exit(0);
      }
    }
    if (!bg) {
      addjob(jobs, pid, FG, cmdline);
      sigprocmask(SIG_UNBLOCK, &set, NULL);
      waitfg(pid);
    }
    else {
      addjob(jobs, pid, BG, cmdline);
      sigprocmask(SIG_UNBLOCK, &set, NULL);
      printf("[%d] (%d) %s", pid2jid(pid), pid, cmdline);
    }
  }
  return;
}
/* 
 * parseline - Parse the command line and build the argv array.
 * 
 * Characters enclosed in single quotes are treated as a single
 * argument.  Return true if the user has requested a BG job, false if
 * the user has requested a FG job.  
 */
int parseline(const char *cmdline, char **argv) 
{
  static char array[MAXLINE]; /* holds local copy of command line */
  char *buf = array;          /* ptr that traverses command line */
  char *delim;                /* points to first space delimiter */
  int argc;                   /* number of args */
  int bg;                     /* background job? */

  strcpy(buf, cmdline);
  buf[strlen(buf)-1] = ' ';  /* replace trailing '\n' with space */
  while (*buf && (*buf == ' ')) /* ignore leading spaces */
    buf++;

  /* Build the argv list */
  argc = 0;
  if (*buf == '\'') {
    buf++;
    delim = strchr(buf, '\'');
  }
  else {
    delim = strchr(buf, ' ');
  }

  while (delim) {
    argv[argc++] = buf;
    *delim = '\0';
    buf = delim + 1;
    while (*buf && (*buf == ' ')) /* ignore spaces */
      buf++;

    if (*buf == '\'') {
      buf++;
      delim = strchr(buf, '\'');
    }
    else {
      delim = strchr(buf, ' ');
    }
  }
  argv[argc] = NULL;
    
  if (argc == 0)  /* ignore blank line */
    return 1;

  /* should the job run in the background? */
  if ((bg = (*argv[argc-1] == '&')) != 0) {
    argv[--argc] = NULL;
  }
  return bg;
}

/* 
 * builtin_cmd - If the user has typed a built-in command then execute
 *    it immediately.  
 */
int builtin_cmd(char **argv) 
{
  if (strcmp("quit", argv[0]) == 0) {
    exit(0);
  }
  if (strcmp("jobs", argv[0]) == 0) {
    listjobs(jobs);
    return 1;
  }
  if (strcmp("bg", argv[0]) == 0 || strcmp("fg", argv[0]) == 0 ) {
    do_bgfg(argv);
    return 1;
  }
  return 0;     /* not a builtin command */
}

/* 
 * do_bgfg - Execute the builtin bg and fg commands
 */
void do_bgfg(char **argv) 
{
  if (argv[1] == NULL) {
    printf("%s command requires PID or %%jobid argument\n", argv[0]);
    return;
  }
  struct job_t *j = NULL;
  if (argv[1][0] == '%') {
    //check if var pass is digit
    if(!isdigit(argv[1][1])) {
      printf("%s: argument must be a pid or %%jibid\n", argv[0]);
      return;
    }
    int jid = atoi(&argv[1][1]);
    if (!(j = getjobjid(jobs, jid)))
      {
	printf("%s: no such job\n", argv[1]);
	return;
      }
  }
  else {
    if(!isdigit(argv[1][1])) {
      printf("%s: argument must be a pid or %%jibid\n", argv[0]);
      return;
    }
    pid_t pid = atoi(argv[1]);
    if (!(j = getjobpid(jobs, pid))) {
      printf("%s: no such process\n", argv[1]);
      return;
    }
  }
  kill(-j -> pid, SIGCONT);
  if (!strcmp(argv[0], "bg")) {
    j-> state = BG;
    printf("%d %d %s", j-> jid, j -> pid, j -> cmdline);
  }
  else {
    j -> state = FG;
    waitfg(j -> pid);
  }
  return;
}

/* 
 * waitfg - Block until process pid is no longer the foreground process
 */
void waitfg(pid_t pid)
{
  while (fgpid(jobs) == pid)
 {
    sleep(1);
 }
  return;
}

/*****************
 * Signal handlers
 *****************/

/* 
 * sigchld_handler - The kernel sends a SIGCHLD to the shell whenever
 *     a child job terminates (becomes a zombie), or stops because it
 *     received a SIGSTOP or SIGTSTP signal. The handler reaps all
 *     available zombie children, but doesn't wait for any other
 *     currently running children to terminate.  
 */
void sigchld_handler(int sig) 
{
  pid_t pid;
  int status;

  while ((pid = waitpid(-1, &status, WNOHANG | WUNTRACED)) > 0) {
    if (WIFSTOPPED(status)) {
      getjobpid(jobs, pid) -> state = ST;
      printf("Job [%d] (%d) stopped by signal %d\n", pid2jid(pid), pid, WEXITSTATUS(status));
    }
    if (WIFSIGNALED(status)) {
      printf("Job [%d] (%d) terminated by signal %d\n", pid2jid(pid), pid, WTERMSIG(status));
      deletejob(jobs, pid);
    }
    if (WIFEXITED(status)) {
      deletejob(jobs, pid);
    }
  }
  return;
}

/* 
 * sigint_handler - The kernel sends a SIGINT to the shell whenver the
 *    user types ctrl-c at the keyboard.  Catch it and send it along
 *    to the foreground job.  
 */
void sigint_handler(int sig) 
{
  pid_t pid = fgpid(jobs);
  kill(-pid, SIGINT);
  return;
}

/*
 * sigtstp_handler - The kernel sends a SIGTSTP to the shell whenever
 *     the user types ctrl-z at the keyboard. Catch it and suspend the
 *     foreground job by sending it a SIGTSTP.  
 */
void sigtstp_handler(int sig) 
{
  pid_t pid = fgpid(jobs);
  kill(-pid, SIGTSTP);
  return;
}

/*********************
 * End signal handlers
 *********************/

/***********************************************
 * Helper routines that manipulate the job list
 **********************************************/

/* clearjob - Clear the entries in a job struct */
void clearjob(struct job_t *job) {
  job->pid = 0;
  job->jid = 0;
  job->state = UNDEF;
  job->cmdline[0] = '\0';
}

/* initjobs - Initialize the job list */
void initjobs(struct job_t *jobs) {
  int i;

  for (i = 0; i < MAXJOBS; i++)
    clearjob(&jobs[i]);
}

/* maxjid - Returns largest allocated job ID */
int maxjid(struct job_t *jobs) 
{
  int i, max=0;

  for (i = 0; i < MAXJOBS; i++)
    if (jobs[i].jid > max)
      max = jobs[i].jid;
  return max;
}

/* addjob - Add a job to the job list */
int addjob(struct job_t *jobs, pid_t pid, int state, char *cmdline) 
{
  int i;
    
  if (pid < 1)
    return 0;

  for (i = 0; i < MAXJOBS; i++) {
    if (jobs[i].pid == 0) {
      jobs[i].pid = pid;
      jobs[i].state = state;
      jobs[i].jid = nextjid++;
      if (nextjid > MAXJOBS)
        nextjid = 1;
      strcpy(jobs[i].cmdline, cmdline);
      if(verbose){
        printf("Added job [%d] %d %s\n", jobs[i].jid, jobs[i].pid, jobs[i].cmdline);
      }
      return 1;
    }
  }
  printf("Tried to create too many jobs\n");
  return 0;
}

/* deletejob - Delete a job whose PID=pid from the job list */
int deletejob(struct job_t *jobs, pid_t pid) 
{
  int i;

  if (pid < 1)
    return 0;

  for (i = 0; i < MAXJOBS; i++) {
    if (jobs[i].pid == pid) {
      clearjob(&jobs[i]);
      nextjid = maxjid(jobs)+1;
      return 1;
    }
  }
  return 0;
}

/* fgpid - Return PID of current foreground job, 0 if no such job */
pid_t fgpid(struct job_t *jobs) {
  int i;

  for (i = 0; i < MAXJOBS; i++)
    if (jobs[i].state == FG)
      return jobs[i].pid;
  return 0;
}

/* getjobpid  - Find a job (by PID) on the job list */
struct job_t *getjobpid(struct job_t *jobs, pid_t pid) {
  int i;

  if (pid < 1)
    return NULL;
  for (i = 0; i < MAXJOBS; i++)
    if (jobs[i].pid == pid)
      return &jobs[i];
  return NULL;
}

/* getjobjid  - Find a job (by JID) on the job list */
struct job_t *getjobjid(struct job_t *jobs, int jid) 
{
  int i;

  if (jid < 1)
    return NULL;
  for (i = 0; i < MAXJOBS; i++)
    if (jobs[i].jid == jid)
      return &jobs[i];
  return NULL;
}

/* pid2jid - Map process ID to job ID */
int pid2jid(pid_t pid) 
{
  int i;

  if (pid < 1)
    return 0;
  for (i = 0; i < MAXJOBS; i++)
    if (jobs[i].pid == pid) {
      return jobs[i].jid;
    }
  return 0;
}

/* listjobs - Print the job list */
void listjobs(struct job_t *jobs) 
{
  int i;
    
  for (i = 0; i < MAXJOBS; i++) {
    if (jobs[i].pid != 0) {
      printf("[%d] (%d) ", jobs[i].jid, jobs[i].pid);
      switch (jobs[i].state) {
      case BG: 
        printf("Running ");
        break;
      case FG: 
        printf("Foreground ");
        break;
      case ST: 
        printf("Stopped ");
        break;
      default:
        printf("listjobs: Internal error: job[%d].state=%d ", 
               i, jobs[i].state);
      }
      printf("%s", jobs[i].cmdline);
    }
  }
}
/******************************
 * end job list helper routines
 ******************************/


/***********************
 * Other helper routines
 ***********************/

/*
 * usage - print a help message
 */
void usage(void) 
{
  printf("Usage: shell [-hvp]\n");
  printf("   -h   print this message\n");
  printf("   -v   print additional diagnostic information\n");
  printf("   -p   do not emit a command prompt\n");
  exit(1);
}

/*
 * unix_error - unix-style error routine
 */
void unix_error(char *msg)
{
  fprintf(stdout, "%s: %s\n", msg, strerror(errno));
  exit(1);
}

/*
 * app_error - application-style error routine
 */
void app_error(char *msg)
{
  fprintf(stdout, "%s\n", msg);
  exit(1);
}

/*
 * Signal - wrapper for the sigaction function
 */
handler_t *Signal(int signum, handler_t *handler) 
{
  struct sigaction action, old_action;

  action.sa_handler = handler;  
  sigemptyset(&action.sa_mask); /* block sigs of type being handled */
  action.sa_flags = SA_RESTART; /* restart syscalls if possible */

  if (sigaction(signum, &action, &old_action) < 0)
    unix_error("Signal error");
  return (old_action.sa_handler);
}

/*
 * sigquit_handler - The driver program can gracefully terminate the
 *    child shell by sending it a SIGQUIT signal.
 */
void sigquit_handler(int sig) 
{
  printf("Terminating after receipt of SIGQUIT signal\n");
  exit(1);
}



